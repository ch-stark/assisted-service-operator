---
# tasks file for AssistedService
- name: scality secret
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: assisted-installer-s3
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: scality
      type: Opaque
      stringData:
        aws_access_key_id: "accessKey1"
        aws_region: "us-east-1"
        aws_secret_access_key: "verySecretKey1"
        bucket: "test"
        endpoint: "http://cloudserver-front:8000"
        s3_data_path: /mnt/data
        s3_metadata_path: /mnt/data

- name: scality PVC
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        labels:
          app: scality
        name: scality-pv-claim
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi

- name: scality deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          app: scality
        name: scality
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: scality
        template:
          metadata:
            labels:
              app: scality
          spec:
            containers:
            - env:
              - name: AWS_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    key: aws_secret_access_key
                    name: assisted-installer-s3
              - name: AWS_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    key: aws_access_key_id
                    name: assisted-installer-s3
              - name: AWS_REGION
                valueFrom:
                  secretKeyRef:
                    key: aws_region
                    name: assisted-installer-s3
              - name: BUCKET
                valueFrom:
                  secretKeyRef:
                    key: bucket
                    name: assisted-installer-s3
              - name: S3_ENDPOINT_URL
                valueFrom:
                  secretKeyRef:
                    key: endpoint
                    name: assisted-installer-s3
              - name: S3DATAPATH
                valueFrom:
                  secretKeyRef:
                    key: s3_data_path
                    name: assisted-installer-s3
              - name: S3METADATAPATH
                valueFrom:
                  secretKeyRef:
                    key: s3_metadata_path
                    name: assisted-installer-s3
              image: quay.io/ocpmetal/s3server
              imagePullPolicy: Always
              name: s3server
              resources:
                limits:
                  cpu: 500m
                  memory: 2000Mi
                requests:
                  cpu: 300m
                  memory: 2000Mi
              volumeMounts:
              - mountPath: /mnt/data
                name: scalityvol
            volumes:
            - name: scalityvol
              persistentVolumeClaim:
                claimName: scality-pv-claim

- name: scality service
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          app: scality
        name: cloudserver-front
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        clusterIP: None
        ports:
        - port: 8000
          protocol: TCP
          targetPort: 8000
        selector:
          app: scality
      status:
        loadBalancer: {}

- name: ui service definition
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: ocp-metal-ui
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        type: LoadBalancer
        ports:
          - port: 80
            targetPort: 8080
            protocol: TCP
            # nodePort: 31000
        selector:
          app: ocp-metal-ui

- name: ui deployment
  community.kubernetes.k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: ocp-metal-ui
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: ocp-metal-ui
        template:
          metadata:
            labels:
              app: ocp-metal-ui
          spec:
            containers:
              - name: ocp-metal-ui
                image: quay.io/ocpmetal/ocp-metal-ui:latest
                imagePullPolicy: Always
                ports:
                  - containerPort: 80
                volumeMounts:
                  - mountPath: /opt/bitnami/nginx/conf/server_blocks/
                    readOnly: true
                    name: nginx-conf
            volumes:
              - name: nginx-conf
                configMap:
                  name: ocp-metal-ui
                  items:
                    - key: nginx.conf
                      path: default.conf
            restartPolicy: Always

- name: assisted-service service definition
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          app: assisted-service
        name: assisted-service
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        ports:
          - name: assisted-service
            port: 8090
            protocol: TCP
            targetPort: 8090
        selector:
          app: assisted-service
        type: LoadBalancer
      status:
        loadBalancer: {}

- name: nginx configmap
  community.kubernetes.k8s:
    definition:
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: ocp-metal-ui
        namespace: '{{ ansible_operator_meta.namespace }}'
      data:
        nginx.conf: |
          server {
            listen 8080;
            server_name _;

            root /app;
            index index.html;

            location /api {
                proxy_pass http://assisted-service.assisted-installer.svc.cluster.local:8090;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_connect_timeout 120;
                proxy_send_timeout 120;
                proxy_read_timeout 120;
                send_timeout 120;
            }

            location / {
              try_files $uri /index.html;
            }
          } 

- name: postgres deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata: {name: postgres, namespace: '{{ ansible_operator_meta.namespace }}'}
      spec:
        replicas: 1
        selector:
          matchLabels: {app: postgres}
        template:
          metadata:
            labels: {app: postgres}
          spec:
            containers:
            - env:
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef: {key: db.name, name: assisted-installer-rds}
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef: {key: db.user, name: assisted-installer-rds}
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef: {key: db.password, name: assisted-installer-rds}
              image: quay.io/ocpmetal/postgresql-12-centos7
              imagePullPolicy: IfNotPresent
              name: postgres
              ports:
              - {containerPort: 5432}
              resources:
                limits: {cpu: 200m, memory: 500Mi}
                requests: {cpu: 100m, memory: 400Mi}
              volumeMounts:
              - {mountPath: /var/lib/postgress, name: postgredb}
            volumes:
            - name: postgredb
              persistentVolumeClaim: {claimName: postgres-pv-claim}

- name: postgres service
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        labels: {app: postgres}
        name: postgres
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        ports:
        - {port: 5432}
        selector: {app: postgres}
        type: LoadBalancer
      status:
        loadBalancer: {}

- name: postgres PVC
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        labels: {app: postgres}
        name: postgres-pv-claim
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests: {storage: 10Gi}

- name: postgres secrets
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        labels: {app: postgres}
        name: assisted-installer-rds
        namespace: '{{ ansible_operator_meta.namespace }}'
      stringData: {db.host: postgres, db.name: installer, db.password: admin, db.port: '5432',
        db.user: admin}
      type: Opaque

- name: assisted-service sso
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: assisted-installer-sso
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: assisted-service
      type: Opaque
      stringData:
        ocm-service.clientId: ""
        ocm-service.clientSecret: ""

- name: assisted-service sso
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: assisted-installer-public-s3
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: scality
      type: Opaque
      stringData:
        aws_access_key_id: "accessKey1"
        aws_region: "us-east-1"
        aws_secret_access_key: "verySecretKey1"
        bucket: "pub-test"
        endpoint: "http://cloudserver-front:8000"
        s3_data_path: /mnt/data
        s3_metadata_path: /mnt/data

- name: assisted-service service
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          app: assisted-service
        name: assisted-service
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        ports:
          - name: assisted-service
            port: 8090
            protocol: TCP
            targetPort: 8090
        selector:
          app: assisted-service
        type: LoadBalancer
      status:
        loadBalancer: {}

- name: assisted-service configmap
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      data:
        ADMIN_USERS: ercohen,lgamliel,mfilanov,ygoldber
        AGENT_DOCKER_IMAGE: quay.io/ocpmetal/assisted-installer-agent:latest
        API_VIP_CONNECTIVITY_CHECK_IMAGE: quay.io/ocpmetal/assisted-installer-agent:latest
        BASE_DNS_DOMAINS: ''
        CONNECTIVITY_CHECK_IMAGE: quay.io/ocpmetal/assisted-installer-agent:latest
        CONTROLLER_IMAGE: quay.io/ocpmetal/assisted-installer-controller:latest
        CREATE_S3_BUCKET: 'true'
        DHCP_LEASE_ALLOCATOR_IMAGE: quay.io/ocpmetal/assisted-installer-agent:latest
        ENABLE_AUTH: 'False'
        FIO_PERF_CHECK_IMAGE: quay.io/ocpmetal/assisted-installer-agent:latest
        FREE_ADDRESSES_IMAGE: quay.io/ocpmetal/assisted-installer-agent:latest
        INSTALLER_IMAGE: quay.io/ocpmetal/assisted-installer:latest
        INVENTORY_IMAGE: quay.io/ocpmetal/assisted-installer-agent:latest
        JWKS_URL: https://api.openshift.com/.well-known/jwks.json
        NAMESPACE: '{{ ansible_operator_meta.namespace }}'
        NTP_SYNCHRONIZER_IMAGE: quay.io/ocpmetal/assisted-installer-agent:latest
        OCM_BASE_URL: https://api-integration.6943.hive-integration.openshiftapps.com
        OPENSHIFT_INSTALL_RELEASE_IMAGE: ''
        OPENSHIFT_VERSIONS: '{"4.6":{"display_name":"4.6.8","release_image":"quay.io/openshift-release-dev/ocp-release:4.6.8-x86_64","rhcos_image":"https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/4.6/4.6.8/rhcos-4.6.8-x86_64-live.x86_64.iso","support_level":"production"},"4.7":{"display_name":"4.7-pre-release","release_image":"quay.io/openshift-release-dev/ocp-release@sha256:2419f9cd3ea9bd114764855653012e305ade2527210d332bfdd6dbdae538bd66","rhcos_image":"https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/4.6/4.6.8/rhcos-4.6.8-x86_64-live.x86_64.iso","support_level":"beta"}}'
        PUBLIC_CONTAINER_REGISTRIES: quay.io
        SELF_VERSION: quay.io/ocpmetal/assisted-service:latest
        SERVICE_BASE_URL: http://assisted-service-assisted-installer.apps.ostest.test.metalkube.org
        SKIP_CERT_VERIFICATION: 'true'
        HW_VALIDATOR_MIN_DISK_SIZE_GIB: '20'
      kind: ConfigMap
      metadata:
        labels:
          app: assisted-service
        name: assisted-service-config
        namespace: '{{ ansible_operator_meta.namespace }}'

- name: assisted-service deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: assisted-service
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: assisted-service
        template:
          metadata:
            labels:
              app: assisted-service
          spec:
            containers:
            - name: assisted-service
              resources:
                limits:
                  cpu: 500m
                  memory: 2000Mi
                requests:
                  cpu: 300m
                  memory: 400Mi
              image: quay.io/ocpmetal/assisted-service:latest
              imagePullPolicy: Always
              ports:
                - containerPort: 8090
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8090
                initialDelaySeconds: 30
              readinessProbe:
                httpGet:
                  path: /ready
                  port: 8090
              envFrom:
                - configMapRef:
                    name: assisted-service-config
              env:
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: assisted-installer-rds
                      key: db.host
                - name: DB_NAME
                  valueFrom:
                    secretKeyRef:
                      name: assisted-installer-rds
                      key: db.name
                - name: DB_PASS
                  valueFrom:
                    secretKeyRef:
                      name: assisted-installer-rds
                      key: db.password
                - name: DB_PORT
                  valueFrom:
                    secretKeyRef:
                      name: assisted-installer-rds
                      key: db.port
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: assisted-installer-rds
                      key: db.user
                - name: OCM_SERVICE_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      key: ocm-service.clientId
                      name: assisted-installer-sso
                - name: OCM_SERVICE_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: ocm-service.clientSecret
                      name: assisted-installer-sso
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_secret_access_key
                      name: assisted-installer-s3
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      key: aws_access_key_id
                      name: assisted-installer-s3
                - name: S3_REGION
                  valueFrom:
                    secretKeyRef:
                      key: aws_region
                      name: assisted-installer-s3
                - name: S3_BUCKET
                  valueFrom:
                    secretKeyRef:
                      key: bucket
                      name: assisted-installer-s3
                - name: S3_ENDPOINT_URL
                  valueFrom:
                    secretKeyRef:
                      key: endpoint
                      name: assisted-installer-s3
                - name: AWS_SECRET_ACCESS_KEY_PUBLIC
                  valueFrom:
                    secretKeyRef:
                      key: aws_secret_access_key
                      name: assisted-installer-public-s3
                - name: AWS_ACCESS_KEY_ID_PUBLIC
                  valueFrom:
                    secretKeyRef:
                      key: aws_access_key_id
                      name: assisted-installer-public-s3
                - name: S3_REGION_PUBLIC
                  valueFrom:
                    secretKeyRef:
                      key: aws_region
                      name: assisted-installer-public-s3
                - name: S3_BUCKET_PUBLIC
                  valueFrom:
                    secretKeyRef:
                      key: bucket
                      name: assisted-installer-public-s3
                - name: S3_ENDPOINT_URL_PUBLIC
                  valueFrom:
                    secretKeyRef:
                      key: endpoint
                      name: assisted-installer-public-s3
                - name: S3_USE_SSL
                  value: "false"
                - name: LOG_LEVEL
                  value: "info"
                - name: LOG_FORMAT
                  value: "text"
                - name: INSTALL_RH_CA
                  value: "false"
                - name: REGISTRY_CREDS
                  value: ""
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: AWS_SHARED_CREDENTIALS_FILE
                  value: /etc/.aws/credentials
